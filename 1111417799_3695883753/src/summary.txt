PREREQUISITES
-------------------------------------
Requires Java 16 installed on the local machine as the code written uses some of the functionalities provided by Java 16

Please run the command - 'java --version' or 'java -version' to check the version currently installed on your machine
You should get the output like this

- java --version
java 16.0.2 2021-07-20
Java(TM) SE Runtime Environment (build 16.0.2+7-67)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing)


BASIC VERSION - EXPLANATION
-------------------------------------
We compute the optimal alignment between two strings X and Y of lengths m and n by building up the two-dimensional m-by-n array which represents the subproblems to be solved. DP(x, y), which turns out to be equivalent to constructing a graph G(XY) with (m x n) nodes laid out in a grid and look for the cheapest path between opposite corners.


BASIC VERSION - COMPLEXITY ANALYSIS
-------------------------------------
- Time Complexity: O(mn), where m = length of input string 1, n = length of input string 2
This is because it takes constant time to determine the value in each of the (m x n) cells of the array DP.
- Space Complexity: O(mn), where m = length of input string 1, n = length of input string 2
This is due to the fact that it is dominated by the cost of storing the array (or the graph G(XY))


==============================================================================================================================================================================

OPTIMISED VERSION - EXPLANATION
-------------------------------------
In memory efficient solution, we bring the space requirement down to linear while reducing the running time by at most an additional constant factor.

OPTIMISED VERSION - OBSERVATION
-------------------------------------
TIME
-------------------------------------
The efficient version always takes time that is greater than or equal to time taken by the basic version due to the fact that one can optimize either time or space, and in this case, space is optimized at the expense of time.

MEMORY
-------------------------------------
For small problem sizes, the memory required for the efficient version of the sequence alignment is greater than or equal to the basic version. But the space optimization is clearly visible when the problem size increases. In the graph, we can clearly see an inflection point when the efficient version outperforms the basic version in terms of memory.

OPTIMISED VERSION - BACKGROUND
-------------------------------------
The crucial changes in the basic algorithm:
2.1
Forward formulation: As observed in the basic version, to fill in an entry of the array A, the recurrence only needs information from the current column of A and the previous column of A. Thus we will “collapse” the array A to an m × 2 array B, where m = length of the input string 1. The array entry B[i, 1] holds the value of OPT(i, n) for i = 0, 1, . . . , m.

2.2
Backward Formulation: We find f (i.e. the shortest path from (0, 0) to (i, j)) and g (shortest path from (i, j) to (m, n) in G(XY)) in reverse order respectively.

2.3
Now combining the forward and backward formulation gives us the the length of the shortest corner-to-corner path in G(XY) that passes through (i, j) i.e. f(i, j) + g(i, j). The next step is to find a number k in {0,...,n}, and q: an index that minimizes the quantity f(q, k) + g(q, k). Then there is a corner-to-corner path of minimum length that passes through the node (q, k).

2.4
Last step is to divide G(XY) along its center column and compute the value of f(i, n/2) and g(i, n/2) for each value of i, using the space-efficient algorithm twice for each section. We can then determine the minimum value of f(i, n/2) + g(i, n/2), and conclude that there is a shortest corner-to-corner path passing through the node (i, n/2). Given this, we can search for the shortest path recursively in the portion of G(XY) between (0, 0) and (i, n/2) and in the portion between (i, n/2) and (m, n).
In running the algorithm, we maintain a globally accessible list P which will hold nodes on the shortest corner-to-corner path as they are discovered.

BASIC VERSION - COMPLEXITY ANALYSIS
-------------------------------------
- Time Complexity: O(mn), where m = length of input string 1, n = length of input string 2
This is because it takes constant time to determine the value in each of the (m x n) cells of the array DP.
- Space Complexity: O(m + n), where m = length of input string 1, n = length of input string 2
This is bevause we apply recursive calls sequentially and reuse the working space from one call to the next. Since we only work on one recursive call at a time, the total space usage is O(m + n)

==============================================================================================================================================================================

SUBMISSIONS
-------------------------------------
PROGRAMS
-------------------------------------
1. Basic_1111417799_3695883753.java
2. Efficient_1111417799_3695883753.java
3. StringGeneratorHelper.java

SCRIPTS
-------------------------------------
4. 1111417799_3695883753_basic.sh
5. 1111417799_3695883753_efficient.sh

PLOTS
-------------------------------------
6. CPUPlot.png - Plot that displays the time pattern across all problem sizes
7. CPUPlot-small.png - Plot that displays the time pattern across small problem sizes
8. MemoryPlot.png - Plot that displays the memory pattern across all problem sizes
9. MemoryPlot-small.png - Plot that displayss the memory pattern across small problem sizes

==============================================================================================================================================================================

Contribution towards the project:
-------------------------------------
1. String Generator: 			1111417799
2. Basic version : 				3695883753
3. Memory efficient version : 	1111417799
4. Test cases generation : 		3695883753
5. Plotting : 					1111417799
6. Documentation: 				3695883753