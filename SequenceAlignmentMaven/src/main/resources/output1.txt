ACACACTGAC_TACTGACTGGTG_ACTACTG_ACT_G_GACTGAC_TACT TAT_TA_TTATACG_CTA_TTATACG_CGACGCGGACGC_G_T_ATACG_
CTACTG_ACT_G_GACTGAC_TACTGACTGGTG_ACTACTG_ACT_G_G_ G_CGACGCGGACGC_G_T_ATACG_CTA_TTATACG_CGACGCGGACGCG
0.224
31532


My output -

Executing Dynamic Programming (Needleman Wunsch) Algorithm
Score = 1296
String #1: [_A_CA_CACT__G__A_C_TAC_TGACTG_GTGA__C_TACTGACTGGACTGACTACTGACTGGTGACTACT_GACTG_G]
String #2: [TATTATTA_TACGCTATTATACGCGAC_GCG_GACGCGTA_T_AC__G_CT_ATTA_T_AC__GCGAC_GC_GGAC_GCG]
Time take for code execution: 33672000 ns
Before Memory: [3572824]	After Memory: [5185536]
Memory required for code execution: 1574 KB

Executing Divide & Conquer + Dynamic Programming Algorithm
String #1: [_AC_AC_A__CTG__ACTA__C_TGAC_TGGTGAC___TACTGACTGGACTGACTACTGACTGGTGACTACTG_AC_TGG]
String #2: [TATTATTATAC_GCTATTATACGCGACGC_G_GACGCGTA_T_AC__G_CTA_TTA_T_AC__GCGAC_GC_GGACGC_G]
Time take for code execution: 44714000 ns
Before Memory: [3572824]	After Memory: [5103776]
Memory required for code execution: 1495 KB